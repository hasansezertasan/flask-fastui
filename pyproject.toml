[tool.poetry]
name = "flask-fastui-demo"
version = "0.1.0"
description = "FastUI Demo with Flask"
authors = ["hasansezertasan <hasansezertasan@gmail.com>"]
license = "MIT"
readme = "README.md"
maintainers = ["hasansezertasan <hasansezertasan@gmail.com>"]
classifiers = ["Private :: Do not Upload"]

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
fastui = "^0.4.0"
Flask = "^3.0.0"
fastapi = "^0.109.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.3"
pre-commit = "^3.6.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.0.0"

[tool.ruff]
# Run `ruff linter` command to see all available linters and their descriptions
target-version = "py311"
line-length = 120
show-fixes = true
extend-include = ["*.ipynb"]
fix = true

[tool.ruff.lint]
select = [
  "E4",
  "E7",
  "E9",
  "E",  # pycodestyle errors
  "F",  # pyflakes
  "W",  # pycodestyle warnings
  "I",  # isort
  "B9",
  # "B",  # flake8-bugbear
  # "C",  # flake8-comprehensions
  # "UP", # pyupgrade
]
ignore = [
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
  "E501", # line too long, handled by black
  "F401", # imported but unused
  "E402", # module level import not at top of file
  "E712", # comparison to True should be 'if cond is True:' or 'if cond:'
  "F821", # undefined name
  "W191", # indentation contains tabs
  "E101", # indentation contains mixed spaces and tabs
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignore-init-module-imports = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "tab"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.poe.tasks]
line-count = "pygount --format=summary"
test = "pytest -v -s"
run = "uvicorn main:app --host 0.0.0.0 --port 5000 --reload"
toolbox = { script = "toolbox:app" }
clean = "frenchmaid clean"
requirements = "poetry export -f requirements.txt --output pyproject.txt --without-hashes"
